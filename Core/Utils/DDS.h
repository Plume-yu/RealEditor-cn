#pragma once
#include <Tera/Core.h>
#include <Tera/FStream.h>

#define DDS_MAGIC 0x20534444

namespace DDS
{
  enum FCC : uint32 {
    FCC_None = 0,
    FCC_DXT1 = 0x31545844,
    FCC_DXT3 = 0x33545844,
    FCC_DXT5 = 0x35545844,
    FCC_DX10 = 0x30315844
  };

  enum DXGI_FORMAT : uint32 {
    DXGI_FORMAT_UNKNOWN,
    DXGI_FORMAT_R32G32B32A32_TYPELESS,
    DXGI_FORMAT_R32G32B32A32_FLOAT,
    DXGI_FORMAT_R32G32B32A32_UINT,
    DXGI_FORMAT_R32G32B32A32_SINT,
    DXGI_FORMAT_R32G32B32_TYPELESS,
    DXGI_FORMAT_R32G32B32_FLOAT,
    DXGI_FORMAT_R32G32B32_UINT,
    DXGI_FORMAT_R32G32B32_SINT,
    DXGI_FORMAT_R16G16B16A16_TYPELESS,
    DXGI_FORMAT_R16G16B16A16_FLOAT,
    DXGI_FORMAT_R16G16B16A16_UNORM,
    DXGI_FORMAT_R16G16B16A16_UINT,
    DXGI_FORMAT_R16G16B16A16_SNORM,
    DXGI_FORMAT_R16G16B16A16_SINT,
    DXGI_FORMAT_R32G32_TYPELESS,
    DXGI_FORMAT_R32G32_FLOAT,
    DXGI_FORMAT_R32G32_UINT,
    DXGI_FORMAT_R32G32_SINT,
    DXGI_FORMAT_R32G8X24_TYPELESS,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT,
    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,
    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,
    DXGI_FORMAT_R10G10B10A2_TYPELESS,
    DXGI_FORMAT_R10G10B10A2_UNORM,
    DXGI_FORMAT_R10G10B10A2_UINT,
    DXGI_FORMAT_R11G11B10_FLOAT,
    DXGI_FORMAT_R8G8B8A8_TYPELESS,
    DXGI_FORMAT_R8G8B8A8_UNORM,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
    DXGI_FORMAT_R8G8B8A8_UINT,
    DXGI_FORMAT_R8G8B8A8_SNORM,
    DXGI_FORMAT_R8G8B8A8_SINT,
    DXGI_FORMAT_R16G16_TYPELESS,
    DXGI_FORMAT_R16G16_FLOAT,
    DXGI_FORMAT_R16G16_UNORM,
    DXGI_FORMAT_R16G16_UINT,
    DXGI_FORMAT_R16G16_SNORM,
    DXGI_FORMAT_R16G16_SINT,
    DXGI_FORMAT_R32_TYPELESS,
    DXGI_FORMAT_D32_FLOAT,
    DXGI_FORMAT_R32_FLOAT,
    DXGI_FORMAT_R32_UINT,
    DXGI_FORMAT_R32_SINT,
    DXGI_FORMAT_R24G8_TYPELESS,
    DXGI_FORMAT_D24_UNORM_S8_UINT,
    DXGI_FORMAT_R24_UNORM_X8_TYPELESS,
    DXGI_FORMAT_X24_TYPELESS_G8_UINT,
    DXGI_FORMAT_R8G8_TYPELESS,
    DXGI_FORMAT_R8G8_UNORM,
    DXGI_FORMAT_R8G8_UINT,
    DXGI_FORMAT_R8G8_SNORM,
    DXGI_FORMAT_R8G8_SINT,
    DXGI_FORMAT_R16_TYPELESS,
    DXGI_FORMAT_R16_FLOAT,
    DXGI_FORMAT_D16_UNORM,
    DXGI_FORMAT_R16_UNORM,
    DXGI_FORMAT_R16_UINT,
    DXGI_FORMAT_R16_SNORM,
    DXGI_FORMAT_R16_SINT,
    DXGI_FORMAT_R8_TYPELESS,
    DXGI_FORMAT_R8_UNORM,
    DXGI_FORMAT_R8_UINT,
    DXGI_FORMAT_R8_SNORM,
    DXGI_FORMAT_R8_SINT,
    DXGI_FORMAT_A8_UNORM,
    DXGI_FORMAT_R1_UNORM,
    DXGI_FORMAT_R9G9B9E5_SHAREDEXP,
    DXGI_FORMAT_R8G8_B8G8_UNORM,
    DXGI_FORMAT_G8R8_G8B8_UNORM,
    DXGI_FORMAT_BC1_TYPELESS,
    DXGI_FORMAT_BC1_UNORM,
    DXGI_FORMAT_BC1_UNORM_SRGB,
    DXGI_FORMAT_BC2_TYPELESS,
    DXGI_FORMAT_BC2_UNORM,
    DXGI_FORMAT_BC2_UNORM_SRGB,
    DXGI_FORMAT_BC3_TYPELESS,
    DXGI_FORMAT_BC3_UNORM,
    DXGI_FORMAT_BC3_UNORM_SRGB,
    DXGI_FORMAT_BC4_TYPELESS,
    DXGI_FORMAT_BC4_UNORM,
    DXGI_FORMAT_BC4_SNORM,
    DXGI_FORMAT_BC5_TYPELESS,
    DXGI_FORMAT_BC5_UNORM,
    DXGI_FORMAT_BC5_SNORM,
    DXGI_FORMAT_B5G6R5_UNORM,
    DXGI_FORMAT_B5G5R5A1_UNORM,
    DXGI_FORMAT_B8G8R8A8_UNORM,
    DXGI_FORMAT_B8G8R8X8_UNORM,
    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,
    DXGI_FORMAT_B8G8R8A8_TYPELESS,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,
    DXGI_FORMAT_B8G8R8X8_TYPELESS,
    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,
    DXGI_FORMAT_BC6H_TYPELESS,
    DXGI_FORMAT_BC6H_UF16,
    DXGI_FORMAT_BC6H_SF16,
    DXGI_FORMAT_BC7_TYPELESS,
    DXGI_FORMAT_BC7_UNORM,
    DXGI_FORMAT_BC7_UNORM_SRGB,
    DXGI_FORMAT_AYUV,
    DXGI_FORMAT_Y410,
    DXGI_FORMAT_Y416,
    DXGI_FORMAT_NV12,
    DXGI_FORMAT_P010,
    DXGI_FORMAT_P016,
    DXGI_FORMAT_420_OPAQUE,
    DXGI_FORMAT_YUY2,
    DXGI_FORMAT_Y210,
    DXGI_FORMAT_Y216,
    DXGI_FORMAT_NV11,
    DXGI_FORMAT_AI44,
    DXGI_FORMAT_IA44,
    DXGI_FORMAT_P8,
    DXGI_FORMAT_A8P8,
    DXGI_FORMAT_B4G4R4A4_UNORM,
    DXGI_FORMAT_P208,
    DXGI_FORMAT_V208,
    DXGI_FORMAT_V408,
    DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,
    DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,
    DXGI_FORMAT_FORCE_UINT
  };

  enum DDSD : uint32 {
    DDSD_NONE = 0,
    DDSD_CAPS = 0x00000001,
    DDSD_HEIGHT = 0x00000002,
    DDSD_WIDTH = 0x00000004,
    DDSD_PITCH = 0x00000008,
    DDSD_BACKBUFFERCOUNT = 0x00000020,
    DDSD_ZBUFFERBITDEPTH = 0x00000040,
    DDSD_ALPHABITDEPTH = 0x00000080,
    DDSD_LPSURFACE = 0x00000800,
    DDSD_PIXELFORMAT = 0x00001000,
    DDSD_CKDESTOVERLAY = 0x00002000,
    DDSD_CKDESTBLT = 0x00004000,
    DDSD_CKSRCOVERLAY = 0x00008000,
    DDSD_CKSRCBLT = 0x00010000,
    DDSD_MIPMAPCOUNT = 0x00020000,
    DDSD_REFRESHRATE = 0x00040000,
    DDSD_LINEARSIZE = 0x00080000,
    DDSD_TEXTURESTAGE = 0x00100000,
    DDSD_FVF = 0x00200000,
    DDSD_SRCVBHANDLE = 0x00400000,
    DDSD_DEPTH = 0x00800000,
    DDSD_ALL = 0x00fff9ee
  };

  enum DDPF : uint32 {
    DDPF_NONE = 0,
    DDPF_ALPHAPIXELS = 0x00000001,
    DDPF_ALPHA = 0x00000002,
    DDPF_FOURCC = 0x00000004,
    DDPF_PALETTEINDEXED4 = 0x00000008,
    DDPF_PALETTEINDEXEDTO8 = 0x00000010,
    DDPF_PALETTEINDEXED8 = 0x00000020,
    DDPF_RGB = 0x00000040,
    DDPF_COMPRESSED = 0x00000080,
    DDPF_RGBTOYUV = 0x00000100,
    DDPF_YUV = 0x00000200,
    DDPF_ZBUFFER = 0x00000400,
    DDPF_PALETTEINDEXED1 = 0x00000800,
    DDPF_PALETTEINDEXED2 = 0x00001000,
    DDPF_ZPIXELS = 0x00002000,
    DDPF_STENCILBUFFER = 0x00004000,
    DDPF_ALPHAPREMULT = 0x00008000,
    DDPF_LUMINANCE = 0x00020000,
    DDPF_BUMPLUMINANCE = 0x00040000,
    DDPF_BUMPDUDV = 0x00080000
  };

  enum DDSCAPS : uint32
  {
    DDSCAPS_NONE = 0,
    DDSCAPS_RESERVED1 = 0x00000001,
    DDSCAPS_ALPHA = 0x00000002,
    DDSCAPS_BACKBUFFER = 0x00000004,
    DDSCAPS_COMPLEX = 0x00000008,
    DDSCAPS_FLIP = 0x00000010,
    DDSCAPS_FRONTBUFFER = 0x00000020,
    DDSCAPS_OFFSCREENPLAIN = 0x00000040,
    DDSCAPS_OVERLAY = 0x00000080,
    DDSCAPS_PALETTE = 0x00000100,
    DDSCAPS_PRIMARYSURFACE = 0x00000200,
    DDSCAPS_RESERVED3 = 0x00000400,
    DDSCAPS_SYSTEMMEMORY = 0x00000800,
    DDSCAPS_TEXTURE = 0x00001000,
    DDSCAPS_3DDEVICE = 0x00002000,
    DDSCAPS_VIDEOMEMORY = 0x00004000,
    DDSCAPS_VISIBLE = 0x00008000,
    DDSCAPS_WRITEONLY = 0x00010000,
    DDSCAPS_ZBUFFER = 0x00020000,
    DDSCAPS_OWNDC = 0x00040000,
    DDSCAPS_LIVEVIDEO = 0x00080000,
    DDSCAPS_HWCODEC = 0x00100000,
    DDSCAPS_MODEX = 0x00200000,
    DDSCAPS_MIPMAP = 0x00400000,
    DDSCAPS_RESERVED2 = 0x00800000,
    DDSCAPS_ALLOCONLOAD = 0x04000000,
    DDSCAPS_VIDEOPORT = 0x08000000,
    DDSCAPS_LOCALVIDMEM = 0x10000000,
    DDSCAPS_NONLOCALVIDMEM = 0x20000000,
    DDSCAPS_STANDARDVGAMODE = 0x40000000,
    DDSCAPS_OPTIMIZED = 0x80000000
  };

  struct DDS_PIXELFORMAT {
    uint32 dwSize = sizeof(DDS_PIXELFORMAT);
    uint32 dwFlags = DDPF_FOURCC;
    uint32 dwFourCC = FCC_DX10;
    uint32 dwRGBBitCount = 0;
    uint32 dwRBitMask = 0;
    uint32 dwGBitMask = 0;
    uint32 dwBBitMask = 0;
    uint32 dwABitMask = 0;
  };

  struct DDS_HEADER_D3D9 {
    uint32 dwSize = sizeof(DDS_HEADER_D3D9);
    uint32 dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT | DDSD_MIPMAPCOUNT | DDSD_LINEARSIZE;
    uint32 dwHeight = 0;
    uint32 dwWidth = 0;
    uint32 dwPitchOrLinearSize = 0;
    uint32 dwDepth = 1;
    uint32 dwMipMapCount = 1;
    uint32 dwReserved1[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    DDS_PIXELFORMAT ddspf;
    uint32 dwCaps = DDSCAPS_COMPLEX | DDSCAPS_TEXTURE | DDSCAPS_OWNDC;
    uint32 dwCaps2 = 0;
    uint32 dwCaps3 = 0;
    uint32 dwCaps4 = 0;
    uint32 dwReserved2 = 0;
  };

  enum D3D10_RESOURCE_DIMENSION : uint32 {
    D3D10_RESOURCE_DIMENSION_UNKNOWN,
    D3D10_RESOURCE_DIMENSION_BUFFER,
    D3D10_RESOURCE_DIMENSION_TEXTURE1D,
    D3D10_RESOURCE_DIMENSION_TEXTURE2D,
    D3D10_RESOURCE_DIMENSION_TEXTURE3D
  };

  struct DDS_HEADER_D3D10  {
    DXGI_FORMAT dxgiFormat = DXGI_FORMAT_UNKNOWN;
    D3D10_RESOURCE_DIMENSION resourceDimension = D3D10_RESOURCE_DIMENSION_TEXTURE2D;
    uint32 miscFlag = 0;
    uint32 arraySize = 1;
    uint32 miscFlags2 = 1;
  };

  struct DDSHeader {
    uint32 dwMagic = DDS_MAGIC;

    DDS_HEADER_D3D9 D3D9;
    DDS_HEADER_D3D10 D3D10;

    FILE_OFFSET DataOffset = 0;

    friend FStream& operator<<(FStream& s, DDSHeader& h)
    {
      s << h.dwMagic;
      if (h.dwMagic != DDS_MAGIC)
      {
        UThrow("Not a DDS file!");
      }
      s.SerializeBytes(&h.D3D9, sizeof(DDS_HEADER_D3D9));
      if (h.D3D9.dwSize != sizeof(DDS_HEADER_D3D9))
      {
        UThrow("The DDS file is invalid!\nSize field does not match the spec!");
      }
      if (h.D3D9.dwFlags & DDPF_FOURCC && h.D3D9.ddspf.dwFourCC == FCC_DX10)
      {
        s.SerializeBytes(&h.D3D10, sizeof(DDS_HEADER_D3D10));
      }
      h.DataOffset = s.GetPosition();
      return s;
    }

    // Calculate size of the first mipmap
    FILE_OFFSET CalculateMipmapSize() const
    {
      const FILE_OFFSET blockSize = 4;
      const FILE_OFFSET blockBytes = GetPixelFormat() == PF_DXT1 ? 8 : 16;
      return (D3D9.dwWidth / blockSize) * (D3D9.dwHeight / blockSize) * blockBytes;
    }

    int32 GetWidth() const
    {
      return D3D9.dwWidth;
    }

    int32 GetHeight() const
    {
      return D3D9.dwHeight;
    }

    EPixelFormat GetPixelFormat() const
    {
      if (D3D9.dwFlags & DDPF_FOURCC)
      {
        if (D3D9.ddspf.dwFourCC == FCC_DX10)
        {
          switch (D3D10.dxgiFormat)
          {
          case DXGI_FORMAT_BC1_TYPELESS:
          case DXGI_FORMAT_BC1_UNORM:
          case DXGI_FORMAT_BC1_UNORM_SRGB:
            return PF_DXT1;
          case DXGI_FORMAT_BC2_TYPELESS:
          case DXGI_FORMAT_BC2_UNORM:
          case DXGI_FORMAT_BC2_UNORM_SRGB:
            return PF_DXT3;
          case DXGI_FORMAT_BC3_TYPELESS:
          case DXGI_FORMAT_BC3_UNORM:
          case DXGI_FORMAT_BC3_UNORM_SRGB:
            return PF_DXT5;
          }
        }
        else
        {
          switch (D3D9.ddspf.dwFourCC)
          {
          case FCC_DXT1:
            return PF_DXT1;
          case FCC_DXT3:
            return PF_DXT3;
          case FCC_DXT5:
            return PF_DXT5;
          }
        }
      }
      return PF_Unknown;
    }
  };
}